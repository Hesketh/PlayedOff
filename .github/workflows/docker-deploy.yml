name: Build and Deploy Docker Containers

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_PREFIX: playedoff
  DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: dotnet test --no-build --configuration Release --logger trx

  build-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v2
      with:
        version: v24.0.6
        daemon-config: |
          {
            "features": {
              "containerd-snapshotter": true
            }
          }

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Log in to private Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Docker image tag
      id: set_tag
      run: |
        if [ "${GITHUB_REF##*/}" = "main" ]; then
          echo "TAG=latest" >> $GITHUB_ENV
        else
          # Sanitize branch name for Docker tag
          BRANCH_TAG=$(echo "${GITHUB_REF##*/}" | tr '/' '-' | tr -cd '[:alnum:]-')
          echo "TAG=$BRANCH_TAG" >> $GITHUB_ENV
        fi

    - name: Build API docker image
      run: |
        dotnet publish PlayedOff.Api/PlayedOff.Api.csproj \
          -c Release \
          -p:PublishProfile=DefaultContainer \
          -p:ContainerRepository=$IMAGE_PREFIX-api \
          -p:ContainerImageTag=${TAG} \
          -p:ContainerRegistry=$REGISTRY \
          -P:PublishContainer=true

    - name: Build and push Website docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_PREFIX-web:${TAG} -f PlayedOff.Web/Dockerfile .
        docker push $REGISTRY/$IMAGE_PREFIX-web:${TAG}